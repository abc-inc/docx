name: Publish
run-name: Publication ${{ github.ref_name }}

on:
  release:
    types: [ created ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  publish:
    name: Publish
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Java
        id: download_java
        run: |
          javaVersion="21.0.7"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            download_url="https://download.bell-sw.com/vm/23.1.7/bellsoft-liberica-vm-core-openjdk${javaVersion}+9-23.1.7+1-windows-amd64.zip"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            download_url="https://download.bell-sw.com/vm/23.1.7/bellsoft-liberica-vm-core-openjdk${javaVersion}+9-23.1.7+1-macos-aarch64.tar.gz"
          else
            download_url="https://download.bell-sw.com/vm/23.1.7/bellsoft-liberica-vm-core-openjdk${javaVersion}+9-23.1.7+1-linux-amd64.tar.gz"
          fi
          file="$RUNNER_TEMP/java_package.${download_url##*64.}"
          wget -O "$file" "$download_url"
          echo "jdkFile=$file" >>"$GITHUB_OUTPUT"
          echo "javaVersion=$javaVersion" >>"$GITHUB_OUTPUT"
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ steps.download_java.outputs.jdkFile }}
          java-version: ${{ steps.download_java.outputs.javaVersion }}
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Build
        run: |
          ./gradlew build
          ./gradlew -Pagent run --args 'convert ../testdata/fonts.docx -o build/tmp/docx4j.pdf --processor docx4j'
          ./gradlew metadataCopy
          ./gradlew -Pagent run --args 'convert ../testdata/fonts.docx -o build/tmp/poi.pdf --processor poi'
          ./gradlew metadataCopy
          ./gradlew -Pagent run --args 'slice ../testdata/fonts.docx -o build/tmp/docx4j.docx --processor docx4j'
          ./gradlew metadataCopy
          ./gradlew -Pagent run --args 'slice ../testdata/fonts.docx -o build/tmp/poi.docx --processor poi'
          ./gradlew metadataCopy
          ./gradlew nativeCompile
      - name: Upload
        run: |
          os="${{ matrix.os }}"
          os="${os%%-*}"
          os="${os/ubuntu/linux}"
          mv docx-cli/build/native/nativeCompile/docx docx-cli/build/native/nativeCompile/docx_$os
          gh release upload "${{ github.ref_name }}" docx-cli/build/native/nativeCompile/docx* --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
